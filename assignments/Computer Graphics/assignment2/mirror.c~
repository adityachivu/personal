#include "GL/glut.h"
#include <stdlib.h>
#include <stdio.h>

#define TIMER 33

#ifdef WIN32 
#pragma warning( disable : 4305) 
#endif 



static float xrot;



GLUquadric *quad;

void computePos(float deltaMove)
{
	// If the current camera vector along ground is vxi + vzj
	// the left and right perpendicular vectors will be -vxi + vzj and vxi - vzj
	if(lstrafe)
		x += vz * 0.5f, z += (-vx) * 0.5f;
	else if(rstrafe)
		x += (-vz) * 0.5f, z += vx * 0.5f;
	
	// Move on camera vector along ground - vxi + vzj
	else
		x += deltaMove * vx * 0.5f, z += deltaMove * vz * 0.5f;
}

// Main drawing function
void renderScene(void) 
{
	
	
	glutSwapBuffers();
} 

void processNormalKeys(unsigned char key, int xx, int yy) 
{ 	
	// Exit the game
	if(key == 27)
   		exit(0);    
    
    // Movement upward and downward
    if(key == 'W')
        y+=0.5;
    if(key == 'S')
        y-=0.5;
        
    // Camera roll limited between -45° to 45°
   	if(key == 'M')
		if(rollamount>-45)
			rollamount-=1;
    if(key == 'N')
		if(rollamount<45)
			rollamount+=1;

} 

// Forward and backward movement, strafing keys
void pressKey(int key, int xx, int yy) 
{
       switch (key) 
	   {
             case GLUT_KEY_UP : deltaMove = 0.8f; break;
             case GLUT_KEY_DOWN : deltaMove = -0.8f; break;	
		 	 case GLUT_KEY_RIGHT: rstrafe = 1; break;
			 case GLUT_KEY_LEFT: lstrafe = 1; break;
       }
}

// Reset all key effects
void releaseKey(int key, int x, int y) 
{ 	
        switch (key) 
		{
             case GLUT_KEY_UP :
             case GLUT_KEY_DOWN : deltaMove = 0; break;
			 case GLUT_KEY_LEFT : lstrafe = 0; break;
			 case GLUT_KEY_RIGHT : rstrafe = 0; break;       
		}
} 

// Change the camera vector if pan is performed
void mouseMove(int x, int y) 
{ 	
		// If xOrigin is positive => We have panned across XZ plane
		// i.e rotation along y-axis. This rotation is also called yaw.
        if(xOrigin >= 0) 
		{
			deltaXZangle = (x - xOrigin) * 0.010f;

			vx = sin(XZangle + deltaXZangle);
			vz = -cos(XZangle + deltaXZangle);
		}

		// If xOrigin is positive => We have panned across y-axis
		// i.e rotation along camera vector. This rotation is also called pitch.
		if(yOrigin >= 0)
		{
			deltaYangle = (yOrigin - y) * 0.006f;
			vy = sin(Yangle + deltaYangle);
		}
}

// Zoom and pan control
void mouseButton(int button, int state, int x, int y) 
{

	// Left button used for panning of camera
	if(button == GLUT_LEFT_BUTTON) 
	{
		// If pressed, the mouse cursor controls the panning
		// xOrigin and yOrigin store last known position of cursor
		if(state == GLUT_UP)
	    {
			XZangle += deltaXZangle, xOrigin = -1;
			Yangle += deltaYangle, yOrigin = -1;		
		}
		else
			xOrigin = x, yOrigin = y;
	}
	
	// button = 3 or 4 is triggered by mouse wheel up and down
	// This is used to control zoom
	if (button == 3 || button == 4)
	{
		// Increase or decrease zoom using mouse wheel
		// Zoom is controlled by changing fov angle
		// Small fov angle or smaller fov => High zoom 
		// Large fov angle or larger fov => Low zoom
		if(fov >= 1.0f && fov <= 45.0f)
	  		fov += (button==3)?(-1):(1);
	  	if(fov <= 1.0f)
	  		fov = 1.0f;
	  	if(fov >= 45.0f)
	  		fov = 45.0f;
	  			
	  	// Set up perspective projection again to reflect FOV change
  		int w = glutGet(GLUT_WINDOW_WIDTH);
  		int h = glutGet(GLUT_WINDOW_HEIGHT);
  		
  		float ratio =  w * 1.0 / h;
		glMatrixMode(GL_PROJECTION);
		glLoadIdentity();
		glViewport(0, 0, w, h);
		gluPerspective(fov, ratio, 0.1f, 100.0f);
		glMatrixMode(GL_MODELVIEW);
	}
}
void drawColoredCube(float r, float g, float b)
{
	/*Draw a unit cube with specified colour of surfaces*/
	glColor4f(r, g, b, 1.0f);
	glBegin(GL_QUADS);
	// Top face
	glVertex3f(1.0 / 2, 1.0 / 2, -1.0 / 2);
	glVertex3f(-1.0 / 2, 1.0 / 2, -1.0 / 2);
	glVertex3f(-1.0 / 2, 1.0 / 2, 1.0 / 2);
	glVertex3f(1.0 / 2, 1.0 / 2, 1.0 / 2);
	// Bottom face
	glVertex3f(1.0 / 2, -1.0 / 2, 1.0 / 2);
	glVertex3f(-1.0 / 2, -1.0 / 2, 1.0 / 2);
	glVertex3f(-1.0 / 2, -1.0 / 2, -1.0 / 2);
	glVertex3f(1.0 / 2, -1.0 / 2, -1.0 / 2);
	// Front face
	glVertex3f(1.0 / 2, 1.0 / 2, 1.0 / 2);
	glVertex3f(-1.0 / 2, 1.0 / 2, 1.0 / 2);
	glVertex3f(-1.0 / 2, -1.0 / 2, 1.0 / 2);
	glVertex3f(1.0 / 2, -1.0 / 2, 1.0 / 2);
	// Back face
	glVertex3f(1.0 / 2, -1.0 / 2, -1.0 / 2);
	glVertex3f(-1.0 / 2, -1.0 / 2, -1.0 / 2);
	glVertex3f(-1.0 / 2, 1.0 / 2, -1.0 / 2);
	glVertex3f(1.0 / 2, 1.0 / 2, -1.0 / 2);
	// Left face
	glVertex3f(-1.0 / 2, 1.0 / 2, 1.0 / 2);
	glVertex3f(-1.0 / 2, 1.0 / 2, -1.0 / 2);
	glVertex3f(-1.0 / 2, -1.0 / 2, -1.0 / 2);
	glVertex3f(-1.0 / 2, -1.0 / 2, 1.0 / 2);
	// Right face
	glVertex3f(1.0 / 2, 1.0 / 2, -1.0 / 2);
	glVertex3f(1.0 / 2, 1.0 / 2, 1.0 / 2);
	glVertex3f(1.0 / 2, -1.0 / 2, 1.0 / 2);
	glVertex3f(1.0 / 2, -1.0 / 2, -1.0 / 2);
	glEnd(); // End of drawing color-cube
}


void drawCube(float r, float g, float b)
{
	glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
	drawColoredCube(0.0, 0.0, 0.0);
	glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	glEnable(GL_POLYGON_OFFSET_FILL);
	glPolygonOffset(0.75, 1.0);
	drawColoredCube(r, g, b);
	glDisable(GL_POLYGON_OFFSET_FILL);
}

void drawScene (GLenum order)
{
    // Compute position if we move forward or left or right
	if (deltaMove || lstrafe || rstrafe)
		computePos(deltaMove);

	// Clear color and set background to blue sky
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 	glClearColor(102.0/255.0, 204.0/255.0, 1.0f, 1.0f);
 	
 	// Sets up viewing
 	// Eye is at recorded position x, y, z
 	// We are looking in the direction vx, vy, vz
 	// The up vector is in y direction
	glLoadIdentity();
	gluLookAt(	  x,    y,     z,
			   x+vx, y+vy,  z+vz,
			   0.0f, 1.0f,  0.0f  );
	
	// Roll the camera as required by roll amount
	glTranslatef(x,y,z);
	glRotatef(rollamount, vx, vy, vz);
	glTranslatef(-x, -y, -z);
	
    GLfloat pos[4] = {-2.8, 5., 1.8, 1.};

    glLightfv (GL_LIGHT1, GL_POSITION, pos);

	glPushMatrix();

	glEnable (GL_CULL_FACE);
	glCullFace (GL_BACK);
	glFrontFace (order);

   
	
	/* Draw the walls */
    glColor3f (1., 1., 1.);
	glBegin(GL_QUADS);
	  glNormal3f (1., 0., 0.);
	    glVertex3f (-3., 3., 4.);
	    glVertex3f (-3., -3., 4.);
	    glVertex3f (-3., -3., -3.);
	    glVertex3f (-3., 3., -3.);
	  glNormal3f (0., 0., 1.);
		glVertex3f (-3., 3., -3.);
		glVertex3f (-3., -3., -3.);
		glVertex3f (3., -3., -3.);
		glVertex3f (3., 3., -3.);
	  glNormal3f (-1., 0., 0.);
		glVertex3f (3., 3., -3.);
		glVertex3f (3., -3., -3.);
		glVertex3f (3., -3., 3.);
		glVertex3f (3., 3., 3.);
	glEnd();
	glDisable (GL_CULL_FACE);

    // random object
    glPushMatrix();
    glTranslatef (1., 0., 0.);
	glScaled(0.1f, 0.8f, 1.0f);
	drawCube(0.52f, 0.37f, 0.26f);
	glPopMatrix();
	
	/* Draw the cylinder */
    glRotatef (0.0, 1., 0., 0.);
    glTranslatef (0., 0., -1.);

    glColor3f (.5, .5, 1.);
    glPushMatrix ();
    glTranslatef (0., 0., 2.);
    gluDisk (quad, 0., .25, 18, 1);
    glPopMatrix ();

    gluCylinder (quad, .25, .25, 2., 18, 8);

    glPushMatrix ();
    glScalef (1., 1., -1.);
    gluDisk (quad, 0., .25, 18, 1);
    glPopMatrix ();
    

	glPopMatrix();
}


static void display( void )
{
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity ();
    gluLookAt (0., 1., 7.,
               -1., 0., 0.,
               0., 1., 0.);
	glRotatef (-xrot*.35, 0., 1., 0.);
    
	// Draw reflected scene first 

	glPushMatrix ();
	// Mirrors lies in YZ plane, so scale by -1.0 in X axis 
	glScalef (-1., 1., 1.);
	// Mirror is 2.0 units from origin, so translate by 4.0 
	glTranslatef (4., 0., 0.);
    drawScene(GL_CW);
	glPopMatrix ();
    
	// draw mirror 
	glClear (GL_DEPTH_BUFFER_BIT);
	glPushAttrib (0xffffffff);
	glDisable (GL_LIGHTING);
	// Create imperfect reflector effect by blending a black
	//  mirror over the reflected scene with alpha of 0.05 
	glEnable (GL_BLEND);
	glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glColor4f (0., 0., 0., 0.5);
	glBegin (GL_QUADS);
	    glVertex3f (-2., 1., 3.);
	    glVertex3f (-2., -1., 3.);
	    glVertex3f (-2., -1., -2.5);
	    glVertex3f (-2., 1., -2.5);
	glEnd ();
	
	glPopAttrib();
    
	/* Draw the real scene */
    drawScene(GL_CCW);

    glutSwapBuffers();

	{
		int err = glGetError();
		if (err != GL_NO_ERROR)
			printf ("Error %x\n", err);
	}
}

void reshape(int w, int h)
{
    glViewport (0, 0, w, h);       
    glMatrixMode (GL_PROJECTION);  
    glLoadIdentity ();
    gluPerspective (50., (float)w/(float)h, 1., 20.);
}

static void cbMainMenu (int value)
{
    if (value == 99) {
        exit (0);
    }
}


static void timer (int value)
{
    xrot += 1.f;
    if (xrot > 360.f) xrot -= 360.f;

    glutPostRedisplay ();
    glutTimerFunc (TIMER, timer, 0);
}


static void init ()
{
    int mainMenu;
    
    xrot = 0.;

    glDisable (GL_DITHER);
    glEnable (GL_DEPTH_TEST);

    {
        GLfloat white[4] = {1., 1., 1., 1.};
        GLfloat black[4] = {0., 0., 0., 0.};

        /* Set up light1 */
        glEnable (GL_LIGHTING);
        glEnable (GL_LIGHT1);
        glLightfv (GL_LIGHT1, GL_DIFFUSE, white);
        glLightfv (GL_LIGHT1, GL_SPECULAR, white);

        /* ambient and diffuse will track glColor */
        glEnable (GL_COLOR_MATERIAL);
        glColorMaterial (GL_FRONT, GL_AMBIENT_AND_DIFFUSE);
        glMaterialfv (GL_FRONT, GL_SPECULAR, white);
		glMaterialf (GL_FRONT, GL_SHININESS, 20.);
    }


	quad = gluNewQuadric ();

    glutDisplayFunc (display); 
    glutReshapeFunc (reshape);
    glutTimerFunc (TIMER, timer, 0);
    
    mainMenu = glutCreateMenu (cbMainMenu);
    glutAddMenuEntry ("Quit", 99);
    glutAttachMenu (GLUT_RIGHT_BUTTON);
}

int main(int argc, char** argv)
{
    glutInit (&argc,argv);
    glutInitDisplayMode (GLUT_RGB | GLUT_DEPTH | GLUT_DOUBLE); 
    glutInitWindowSize (300,300);
    glutInitWindowPosition (0,0); 
    glutCreateWindow ("Two pass mirror");

    init ();

    glutMainLoop ();
    return 0;
}

